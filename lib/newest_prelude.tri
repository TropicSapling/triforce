decl symblock sb_comment enclosed by // \n; // regex is used to match

// Regex is used to match here too, so we need to do '\\' instead of '\'
decl symblock __sb_default_str__ enclosed by " " with escaper \\;

decl symindies { } [ ] , . :;
decl symindies + - * /;
decl symindies @ % ? !;

// Built-in symindies: ( ) ; $ # < = > ~ & |
// Built-in symgroups:
// - default
// - whitespace

// ================================================================================
// 
//                          ########  THE PRELUDE  ########
// 
// ================================================================================

// TODO: Put the basic things that are needed for the prelude but shouldn't be visible
//       from the outside inside a category 'Foundation'. This can be done by writing the
//       category stuff by hand using anonymous functions, or by generating these
//       anonymous functions.
// 
// OR:   Alternatively, put everything inside 'Prelude' category and then expose Prelude.

// ========================================
//        #### The Fundamentals ####
// ========================================

// Definition of a basic form of 'let'.
// TODO: 'unpredictable'?
##(precedence below _)
(macro $glob_scope => code (
	// Preceding and trailing pattern can be omitted when matching.
	// Here we omit the pattern def for the variable scope.
	// We write 'let $pat = $val;' rather than 'let $pat = $val; $scope'.
	($(let $pat = $val;) => (
		$$(glob_scope)
	)) (
		##(precedence below _)
		macro $pat $val $scope => code (
			($($$(pat)) =>
				$$(scope)
			) $$(val)
		)
	)
))

// EVERYTHING here and below gets passed as 1 arg to the above anonymous macro
// due to its precedence being below everything (even the semicolon).
// The result is the global scope with the 'let ... = ...;' macro defined.

// Example:
//    'let n = 1 + 2; println n;'
// => '($(let $pat = $val;) => (let n = 1 + 2; println n;)) (macro $pat $val $scope => `` ($($$(pat)) => $$(scope)) $$(val) ``)'
// => '($(n) => println n;) (1 + 2)'
// => '($(n) => println n;) 3'
// 
// The first 2 steps can only be done during compilation. The last step can in this case also be done
// during compilation, but may have to be done at runtime in other situations.

// TODO: 'let [$a as ..., $b as ..., ...] = <value>;' function which allows both multiple
//       definitions at once and destructuring of the value.

// TODO: Define 'debug $expr' function similar to Rust's 'dbg!(...)'

// Useless, but looks nice sometimes.
// Convention to use this whenever $expr spans multiple lines.
// Also use this for the classics 'func', 'if', etc.
let {$expr} = $expr => expr;

// TODO: FIX BOILERPLATE CODE BELOW

// Defines basic function definitions
// TODO: Allow for impure & unpredictable functions
let func $declaration --> $ret_type {$body} = macro _ _ _ => code {
	let $$(declaration) = $$(cloaked declaration) => (($x as ret_type) => x) $$(body); $scope
};

// Macro functions
let macro func $declaration --> $ret_type {$body} = macro _ _ _ => code {
	let $$(declaration) = macro $$(cloaked declaration) => (($x as ret_type) => x) $$(body); $scope
};

// Defines 'func $declaration {$body}' (return type unchecked) using our new 'func $declaration --> $ret_type {$body}'!
//> macro func [func $declaration {$body}] --> _ {
macro func (  func $declaration {$body}  ) --> _ {
	code {
		func $$(declaration) --> _ {$$(body)}
	}
}

macro func (  macro func $declaration {$body}  ) --> _ {
	code {
		macro func $$(declaration) --> _ {$$(body)}
	}
}

// This definition makes empty function bodies work the way you'd expect.
// Note: use 'func ... {$_}' when you really mean to do partial application.
macro func (  func $declaration {}  ) {
	code {
		func $$(declaration) {()}
	}
}

macro func (  macro func $declaration {}  ) {
	code {
		macro func $$(declaration) {()}
	}
}

// We make this function uncallable by making the last parameter
// require '~_' ("nothing possible here"), since we want it to
// be used as an object rather than a function to be called.
func Typed $expr $type (~_) {}
// If all pattern matching fails, throw away type restriction
func __catch__ (Typed #($expr) _) {expr}

// Pronounced as: "$expr [should] be[come] type"
func ($expr as type   ): $type {Typed expr type}
func (Typed #($expr) _): $type {expr: type} // allows for stuff like '(n: 0..): any Int' changing the type of 'n'

func any $obj {obj (__all_args_but_one__ obj)}

// TODO: getting category of value and doing 'any <category>'
// i.e. 'type of Player 50 100' => 'Player _ _'
func type of (_ constructed using $constructor) {any constructor}

// Marker for unvalidated input
// File reading, user input, etc. should use this
// Always ensure raw input is ~UnvalidatedInput
func UnvalidatedInput (~_) {}

// We redefine 'let' as a more advanced form.
// Pronounced as: "let $var be $type and equal $val"
func let ($pat as _ implic made () => UNPARSED EXPLIC): $type = $val; {
	let `pat` = val: type; $scope
}

func let ($pat as _ implic made () => UNPARSED EXPLIC): auto = $val; {
	let `pat`: type of val = val; $scope
}

// If no type specified, $pat is defined as immutable
func let ($pat as _ implic made () => UNPARSED EXPLIC) = $val; {
	let `pat`: val = val; $scope
}

// Useful for distinguishing '()' from 'Wrapped ()'
// See https://www.reddit.com/r/ProgrammingLanguages/comments/hy6emx/explicit_nullability_vs_optionals/fzarbwu/
func Wrapped $obj (~_) {}

func List $item ($tail as any List) (~_) {}

// This sets the default list to 'List' and returns nothing
__set_default_list__ List

// Adds the following functionality to 'func':
//   - Recursion
//   - 'where' clauses
func (  func ($decl_closure as _ implic made () => UNPARSED (raw EXPLIC)) --> ($ret_type as _) where we ($decls_closure as _ implic made () => raw EXPLIC) {($body_closure as _ implic made () => EXPLIC)} ) {
	let `decl_closure` = {
		decls_closure();

		func $f `decl_closure()` --> ret_type {
			let `decl_closure` = f f;

			body_closure()
		}

		($f decl_closure()) ($f decl_closure()) // becomes '($f fib $n) ($f fib $n)' => '(($f fib $n) fib $n)' if pattern = 'fib $n'
	}; $scope
}

// Complete *total* functions: allows easy attributes, recursion & types
// - a total function must return, meaning it must:
//		- have no (possibly) infinite loops
//		- have no possibility of crashing
// Note: adding 'impure' before '[partial] func' works since 'impure rec func' exists
basic func ##($attrs as implicitly unchecked paused any List) func ($pattern as implicitly unchecked paused) ($typed_body as implicitly unchecked paused); {
	paused raw {
		// This built-in tells compiler 'pattern' has attributes 'attrs'
		// and returns 'pattern'. The attributes must be given using the default list.
		rec basic func `paused (__set_attributes__ attrs pattern)` {typed_body: ~Undefined};
	}
};

// Complete *partial* functions (I know that sounds contradicting but it's not actually so yeah xD)
basic func ##($attrs as implicitly unchecked paused any List) partial func ($pattern as implicitly unchecked paused) ($typed_body as implicitly unchecked paused); {
	paused raw {
		rec basic func `paused (__set_attributes__ attrs pattern)` {typed_body};
	}
};

basic func         func ($pattern as implicitly unchecked paused) ($typed_body as implicitly unchecked paused); {[]         func `paused pattern` {typed_body};};
basic func partial func ($pattern as implicitly unchecked paused) ($typed_body as implicitly unchecked paused); {[] partial func `paused pattern` {typed_body};};

// TODO: Add ability to provide return type before function body?
// ----
// Maybe using '-->' operator? Since '->' is taken for pointers.

/// # The legendary SEMICOLON.
/// Structures statements for evaluation.
/// Evaluates `$statement` first and then `$scope`. Returns `$scope`.
/// 
/// ## TODO
/// Move this (or declare above); it's clearly used long before being defined!
##[precedence below _, right assoc]
func [$statement;$scope] {scope} // `x; y; z; 123` => `x; (y; (z; 123))` => `123`

// '->' means 'pointer/ref to'
impure func ($var as implicitly ->(Typed _ #($type))) = ($val as type) {
	__assign__ var (Typed val type)
};

func ref to $val allowing $sub {
	paused raw (->(Typed val #($super)) where sub matches super)
};

func ref to $val {
	ref to val allowing val
};

// -------------------------
// |    CATEGORY: Bool     |
// -------------------------

func True  (~_) {}
func False (~_) {}

func (True)  && ($b as any Bool)                    {b}
func (False) && (any Bool implic made () => EXPLIC) {False}

func (True)  || (any Bool implic made () => EXPLIC) {False}
func (False) || ($b as any Bool)                    {b}

func !(True)  {False}
func !(False) {True}

// -------------------------
// | CATEGORY: Comparison  |
// -------------------------

func $a == $a {True}
func _  == _  {False}
func $a != $b {!(a == b)}

func ($expr as type) matches $type {True}
func _               matches $type {False}

let $expr is $type = $expr matches $type;

// Useful for ruling out potential runtime scenarios at compile time
// True|False could be True, but !(False could be True)
func $a could be $b {b matches a}

// -------------------------
// |   CATEGORY: Control   |
// -------------------------

macro func if $cond then $tbody else $fbody {
	``

	func if (True)  then $tbody else $fbody {tbody()}
	func if (False) then $tbody else $fbody {fbody()}

	if $$(cond) then
		() => $$(tbody)
	else
		() => $$(fbody)

	``
}

// ex: 'if x == 123 {456}'
func (  if (True)  {($tbody as _ implic made () => EXPLIC)}  ) {tbody()}
func (  if (False) {($tbody as _ implic made () => EXPLIC)}  ) {}
// ex: 'if x == 123 {456} else {789}'
func (  if (True)  {($tbody as _ implic made () => EXPLIC)} else {($fbody as _ implic made () => EXPLIC)}  ) {tbody()}
func (  if (False) {($tbody as _ implic made () => EXPLIC)} else {($fbody as _ implic made () => EXPLIC)}  ) {fbody()}

// ex: 'if x == 123 then 456 else 789'
let if $cond then $tbody             = if $cond {$tbody};
let if $cond then $tbody else $fbody = if $cond {$tbody} else {$fbody};

// ex: 'return 123 if x == 456 else 789;'
let $tbody if $cond else $fbody = if $cond then $tbody else $fbody;

func (  while ($cond as any Bool) {($body as _ implic made () => EXPLIC)}  ) {
	// TODO ...
}

func (  for each $item in ($list as any List) {($body as _ implic made () => EXPLIC)}  ) {
	// TODO ...
}

// -------------------------
// |   CATEGORY: Number    |
// -------------------------

// Inclusive range
func $n..$m {
	if m > n then
		n|(n + 1)|...|m
	else if m == n then
		n
	else
		()
}

// Exclusive range
func $n..<$m {
	n..(m - 1)
}

func $n +- $m {n-m..n+m}

// i.e. 'n += m;' => 'n = n + m;'
macro func $n $op= $m; {
	`$$n = $$n $$op $$m;`
}

// -------------------------
// |  CATEGORY: Category   |
// -------------------------

// TODO: Move out of prelude into std lib if possible.
// Ex: 'fieldified [$a as 123, $b as any Int]' => AST: [["as", "$a", "123"], ["as", "$b", ["any", "Int"]]]
func fieldified ($fields as any List) {
	let AST: any List = [];

	for each field in fields {
		AST += listified paused field; // note how the field is parenthesised (add 'raw' to avoid this)
	};

	AST // = [["as", "$field", "<type>"], ["as", "$field2", "<type2>"], ...]
};

func object ($obj as implicitly unchecked paused) ($fields as any List); {
	paused raw (func `paused obj` `raw codified fieldified fields` () {};)
};

func object ($obj as implicitly unchecked paused); {
	paused raw (object `paused obj` [])
};

func category ($cat as implicitly unchecked paused) ($contents as any List) {
	paused raw (let `paused cat` = contents; contents)
};

// Currently doesn't do anything more than checking
// that what you're exporting is a list, which is
// useless since 'category' does that later anyway
func export ($exports as any List); {
	exports
};

func expose ($cat as any List) {
	paused raw {
		// Nothing in this block is evaluated until after returning.
		// This block captures variables, functions, etc.
		// Captures have precedence over what is defined in __caller_scope__.
		// I.e. if __caller_scope__ defines another 'cat' that will be ignored.
		// We could still put something undefined in here though and it would
		// still compile if __caller_scope__ defines that thing.

		let `cat[0]` = cat[0]; // using '``' to clarify the name is the evaluated cat[0] rather than 'cat[0]'
		if cat length > 1 {
			expose cat[1..];
		};
	}
};

// -------------------------
// |   PROPER CATEGORIES   |
// -------------------------

category Misc {
    // Like '()', but propagates; see https://docs.julialang.org/en/v1/manual/missing/
    // Typical pronunciation: "unknown" or "missing".
	object ???;
    
    // This is really just NaN, but renamed since "Not a Number is a number" sounds weird.
    // Behaves almost like '???', except comparisons follow the NaN specification instead
    // of propagating the object: UndefNum != _ is always True, and all other
    // comparisons are always False.
    object UndefNum;
    
    // Infinity. Follows the floating point specification.
    object Infinity;
    
    // TODO: move 'UndefNum' and 'Infinity' to a separate category for numbers

	func optionally $x {x|()};

	// TODO: Move into more fitting category
	func [                            ] {List $item ()};
	func [($expr as implicitly paused)] {
		// We need this object to allow for multi-dimensional Lists
		object CommaList [
			$item,
			$tail as any CommaList
		];

		func ($x as CommaList #($item) #($tail)), $y { CommaList item (tail, y)        };
		func ($x as CommaList #($item) #()     ), $y { CommaList item (CommaList y ()) };
		func ($x                               ), $y { CommaList x    (CommaList y ()) };

		func ($expr as CommaList #($item) #($tail)) converted to (List) { List item (tail converted to List) };
		func ($expr as CommaList #($item) #()     ) converted to (List) { List item () };

		expr converted to List
	};

	// TODO: list[i] access syntax

	func stringified ($expr as unchecked paused) --> any String {
		(listified (unchecked paused expr))[0]
	};

	// TODO: Generalise into 'apply $f to itself $n times'
	// TODO: Move out of prelude into std lib
	func apply $f to itself {f f};

	export [optionally];
};

expose Misc;
