/// ==================================================================================
/// 
///                     ########  TRIFORCE SPECIFICATION  ########
/// 
/// ==================================================================================

/// # Triforce by Example
/// This file specifies the Triforce language by means of code examples.
/// 
/// **Note:**
/// - Only non-obvious parts of the language are explained here.
/// - The specification is incomplete and ever-evolving.


/// ##################################################################################
/// ##################################################################################


/// ==============================
/// ## Triforce fits on a postcard
/// ==============================
/// 
/// This is basically all of the language in a compact block to show how small it is.
/// It includes syntax sugar and would technically be even "simpler" without.

defgroup  () (>>>
deftokens () (
	λ((##((_ precedes this) (assoc none)) take (x 13|37) and '...') λ(#) Λ(#) #'~|') (
		(take 37 and rust $unapplied) println!("Triforce fits on a postcard!");
	) (λ(() 37|73|31|13 & ~73 | super power <2|4>|42) Λ(y) Λ(>>>z) (
		// Run code in language `y`, then return a weird list
		====================================================================
		runforeign \!(y) `\(z) (linklist "first" `(`second """ "third" """))
		====================================================================
	)
)


/// ##################################################################################


/// ================
/// ## Formal syntax
/// ================
/// 
/// The formal syntax will be specified with a metalanguage similar to Go's:
/// ```
/// Syntax     = [Definition]…
/// Definition = def_name "=" Expression ["\n" "|" Expression]… "\n"
/// Expression = Term ["|"|"=>" Term]…
/// Term       = Factor [Factor]…
/// Factor     = def_name["<"variant">"] | tok["-"tok] | Group | Option | Variable
/// Group      = "("Expression")"
/// Option     = "["Expression"]"["…"]
/// Variable   = "\\("var["="regex]")"
/// ```
/// 
/// Lexical tokens are enclosed in "" or `` (i.e. "let", "=", "``" or `""`).
/// Terminal tokens are lowercase. Non-terminal tokens are CamelCase.
/// - `a=>b` = `a` evaluating into `b`
/// - `a-b`  = characters a through b
/// 
/// Note that one or more consecutive newlines - potentially intertwined with any
/// other whitespace, which is ignored - together form a `\n` token. All other
/// whitespace is ignored, apart from serving to separate non-newline tokens.
/// 
/// ### General
/// -----------
/// ```
/// Syntax = Expr
/// Expr   = List|Atom
/// Atom   = Literal|ident_atom|"..."
/// ```
/// 
/// Every program consists of a single `Expr` containing its code. This expression is
/// either a `List` or an `Atom`. If the file contains multiple atoms, these will
/// automatically become enclosed by parentheses so that they form a single `List`.
/// 
/// Additionally, within any `List` more parentheses will be automatically inserted as
/// specified by precedence rules, ultimately forming more `List`s. This means that
/// conveniently, parentheses can in many cases be omitted.
/// 
/// **Note:** An `ident_atom` is allowed to be the special `\n` token described above.
/// 
/// ### Commands
/// ------------
/// ```
/// Command = SpecialCmd
///         | LinkList
///         | TypeAnd
/// ```
/// 
/// `SpecialCmd`s are specified in the section on special forms.
/// 
/// `LinkList` is specified in the section on lists.
/// `TypeAnd`  is specified in the section on types.
/// 
/// ### Arguments
/// -------------
/// ```
/// Argument   = Expr
/// SpecialArg = MatchExtract
///            | Placeholder
/// ```
/// 
/// Arguments can be any expression, including "special" arguments (specified later).
/// 
/// ### SYNTAX SUGAR
/// ----------------
/// 
/// General
/// -------
/// ```
/// MultilineQuote = \(x="===+") contents \(x)
/// ```
/// 
/// `MultilineQuote` converts to `Quote<List<contents>>`.
/// 
/// Mixfixs
/// -------
/// ```
/// Mixfix = (Argument|ident_atom) [Argument|ident_atom]…
/// ```
/// 
/// `Mixfix` is syntax sugar that reduces to normal lambda application.
/// - Note that it must always contain *at least* one `ident_atom`.
/// 
/// **Example of `Mixfix`:**
/// > let identifier = $unapplied
/// > identifier
/// <=>
/// > (let $id = $val\n$scope) identifier $unapplied identifier
/// <=>
/// > (λ(val) val)
/// 
/// Open-ended parentheses
/// ----------------------
/// ```
/// OpenParenthesis = "(>>>"
/// ```
/// 
/// When `OpenParenthesis` is used, it will be converted into a normal parenthesis and
/// a closing parenthesis will be placed at the end of the scope to pair with it. What
/// this means is that a new closing parenthesis will be automatically inserted right
/// before an already existing scope-ending `)`. If no such scope-ender is found, the
/// scope continues until EOF, or even past it if the file is included elsewhere.
/// 
/// Anonymous parameters
/// --------------------
/// ```
/// UnnamedParam = "'" Type "'"
/// ```
/// 
/// `UnnamedParam` converts into `Parameter<List<() Type>>`.
/// 
/// ### LISTS
/// ---------
/// ```
/// List = "(" [CodeItems] ")"
/// 
/// CodeItems = Expr [Expr]…
/// CodeItems = (List|ident_atom) [Argument]…
///           | LambdaObject
///           | TypeObject
///           | SpecialArg
///           | Command
///           | Mixfix
///           | Atom
/// ```
/// 
/// `List` is a list of code items which are all evaluated together as a whole.
/// - In its unevaluated form, it is indexable and its code items are valid values.
/// - It may be empty, and will in that case evaluate to itself.
/// 
/// Linked Lists
/// ------------
/// ```
/// LinkList = "linklist" Expr List => List
/// ```
/// 
/// `LinkList` creates a list by linking a first item with a list of following items.
/// 
/// ### SPECIAL FORMS
/// -----------------
/// Special forms are evaluated differently from normal expressions.
/// 
/// λλλλλλλ
/// -------
/// ```
/// LambdaObject = Function Parameter Expr
///              | MacroFun Parameter Expr
/// 
/// Function = "λ"
/// MacroFun = "Λ"
/// 
/// Parameter = List<ParDecl [Type]>
///           | List<ParName [Type]>
/// 
/// ParDecl = List<[Attrs] [Parameter|ident_atom]…>
/// ParName = ident_atom
/// ```
/// 
/// **Evaluation:**
/// - First code item follows normal evaluation, but must evaluate to a valid keyword.
/// - `Parameter` defines a parameter; only its `Type` is evaluated normally.
/// - `Expr` evaluates to a reduced form of itself serving as the function body.
/// 
/// **Upon calling `Function`:**
/// Its body will run and evaluate to a result that will be returned.
/// 
/// **Upon calling `MacroFun`:**
/// Its body will run and evaluate *during compilation* to a result that is returned.
/// The returned result will replace the macro call and *evaluate once more*.
/// 
/// **Equality:**
/// Two lambdas are considered equal if:
/// 1. They are of equal variant (`λ` or `Λ`).
/// 2. The `Type`s of their respective `Parameter`s are equal.
/// 3. Their body `Expr`s are equal after conversion to de Bruijn indexing.
/// 
/// This will sometimes be undecidable - in those cases an error should be issued.
/// 
/// **Associativity:**
/// Lambdas are *right-associative*.
/// - `λ(x) λ(y) Λ(z) return === 42 ===` <=> `λ(x) (λ(y) (Λ(z) (return === 42 ===)))`
/// 
/// **NOTE:**
/// `(>>>` as part of `Parameter` here indicates something slightly different than it
/// normally does. It will not enclose everything that follows it, but instead act as
/// a normal start-of-parameter - apart from also declaring that an open-ended `(>>>`
/// should be automatically placed ahead of the parameter/argument at application.
/// 
/// Special Arguments
/// -----------------
/// ```
/// MatchExtract = "#"[Parameter]
/// Placeholder  = "$"[ident_atom]
/// ```
/// 
/// `MatchExtract` matches an argument and optionally extracts it into a variable.
/// `Placeholder` is a placeholder argument acting as no argument - useful for mixfix.
/// 
/// **Evaluation:**
/// - `"#"`, `"$"` and `ident_atom` evaluate to themselves.
/// - `Parameter` defines a parameter; only its `Type` is evaluated normally.
/// 
/// Special Commands
/// ----------------
/// ```
/// SpecialCmd = Quote
///            | Escape
///            | GroupDef
///            | TokenDef
///            | RunForeign
/// ```
/// 
/// **Evaluation:**
/// - First code item follows normal evaluation, but must evaluate to a valid keyword.
/// - Evaluation of remaining code items depend on the command.
/// 
/// Quoting & Escaping
/// ------------------
/// ```
/// Quote  = "`"        Expr => Expr
/// Escape = "\\" ["!"] List
/// ```
/// 
/// **Evaluation:**
/// `Quote` takes an `Expr` and returns it in its unevaluated form, apart from any
/// `Escape` subexpressions which will be evaluated normally and then inserted.
/// - Evaluated escapes will be inserted as-is if using `!`, otherwise list-enclosed.
/// - Escapes evaluating outside of a quote will error.
/// 
/// Group/Token Definitions
/// -----------------------
/// ```
/// GroupDef = "defgroup"  List<[token]…> Expr
/// TokenDef = "deftokens" List<[token]…> Expr
/// ```
/// 
/// **Evaluation:**
/// - Tokens evaluate to themselves.
/// - `Expr` is evaluated normally and returned.
/// 
/// Foreign Function Interface
/// --------------------------
/// ```
/// RunForeign = "runforeign" "rust" block Expr
/// ```
/// 
/// **Evaluation:**
/// - Second code item follows normal evaluation, but must evaluate to `rust`.
/// - The code block is evaluated as Rust code.
/// - `Expr` is evaluated normally and returned.
/// 
/// ### TYPE SYSTEM
/// ---------------
/// ```
/// TypeObject = LiquidType|SolidType
/// 
/// LiquidType = NormalType
///            | SuperType
///            | PowerType
/// 
/// NormalType = InclSetUnion
///            | ExclSetUnion
/// 
/// InclSetUnion = "|" [Expr ["|" Expr]…]
/// ExclSetUnion = "~" Type
/// 
/// SolidType = "<" Type ">"
/// SuperType = "super" Type
/// PowerType = "power" Type
/// 
/// Type = Expr => List<LiquidType>
/// ```
/// 
/// **NOTE:** The special argument `MatchExtract` is also part of the type system.
/// 
/// *Remark: `SuperType`, `PowerType` and `MatchExtract` could in theory all reduce
/// to forms of `NormalType`. This would however require lazy infinite lists.*
/// 
/// TODO: add syntax sugar
/// 
/// Type Intersection
/// -----------------
/// ```
/// TypeAnd = "&" Type "&" Type ["&" Type]… => List<LiquidType>
/// ```
/// 
/// The type intersection command returns the intersection of all given types.
/// 
/// ### Attributes
/// --------------
/// ```
/// Attrs = "##" List<[Attr]…>
/// Attr  = List<PreceAttr>
///       | List<AssocAttr>
/// 
/// PreceAttr = Identifier "precedes" Identifier
/// AssocAttr = "assoc" ("none"|"left"|"right")
/// 
/// Identifier = Expr|"this"
/// ```
/// 
/// Precedence relations form a DAG - see figure 1 in the following paper:
/// [https://www.cse.chalmers.se/~nad/publications/danielsson-norell-mixfix.pdf]
/// 
/// Default associativity should probably be "none" or "left".
/// 
/// ### Misc.
/// ---------
/// ```
/// Literal = String|number
/// 
/// Comment = "//"        anything "\n"
/// String  = `"`         anything `"`
///         | \(x=`"""+`) anything \(x)
/// ```
/// 
/// Comments and whitespace can be inserted anywhere.
/// Note however that newlines count as tokens and are sometimes used.

/// -----------------------------------

// Below is some sort of prelude/foundation to test the syntax

/// Groups are used for deciding how to form tokens.
defgroup (+ - * / ^ < > & | =) (>>>
defgroup (@ % ? !)             (>>>
defgroup (. ,)                 (>>>
defgroup (: ;)                 (>>>
defgroup ($ #)                 (>>>
/// Built-in groups:
/// - Default
/// - Whitespace, excl. `\n` (forms no tokens - only serves to separate)
/// - `\n`

/// The `deftokens` command defines specific stand-alone tokens.
deftokens ({ } [ ] ~ ') (>>>
/// Built-in tokens:
/// - `(`
/// - `)`
/// - `(>>>`

/// Example following the above definitions:
/// > let invalidstr str="123 + 456"//+789
/// > 				   *=(("*789"))
/// =>
/// [let, invalidstr, str, =, "123 + 456", *=, (, (, "*789", ), ), \n]

/// **Lambdas are special built-in objects with 2 fields: `$parameter` and `$body`.**
/// `λ` = anonymous function
/// `Λ` = anonymous macro
/// 
/// The fields are evaluated in order, but in special ways specific to each field.
/// They both evaluate to reduced forms where as much as possible has been evaluated
/// normally. Whatever cannot be normally evaluated will evaluate to itself.
/// - Calling the object will run `$body` and return its result
/// 
/// Below we define `let $pat = $val\n` in the global scope with `Λ`:
(Λ(glob_scope) (
	======================================
	(λ((let (pat) = (val)\\n(>>>scope))) (
		\(glob_scope)
	)) (Λ(pat) λ(val) Λ(scope) (
		================================
		(λ\\(pat) \\\\(scope)) \\\\(val)
		================================
	))
	======================================
)) (>>>

/// Everything here and after is passed as input to the `Λ`.
/// This is because `(>>>` is a special, open-ended parenthesis.
/// 
/// Meaning that:
/// > (Λ(glob_scope) (...)) (>>>
/// > ...
/// <=>
/// > (Λ(glob_scope) (...)) (
/// >	 ...
/// > )
/// 
/// That is, the global scope is passed as the `glob_scope` argument.

let (N/A) = |
let _     = ~N/A
let any   = _

let type1 = 123
let type2 = 1|2|3

/// Example lambda ...
let lambda = λ(x type1) λ(y type2) λ(z) (
	runforeign rust `(println("Got {}, {}, {}.", \(x), \(y), \(z));) (

	Λ((function taking (a) and (b type2))) (
		runforeign rust `(println("Entered macro.");) (>>>

		=================================================
		\(function taking $ and 2) // partial application
		=================================================
	)
)
/// ... and then again, with the RHS evaluated into a final *object value*:
let lambda = λ(() 123) λ(y 1|2|3) λ(z ~|) (
	runforeign rust `(println("Got {}, {}, {}.", 123, \(y), \(z));) (

	Λ(
		(function taking (() |) and (() 1|2|3))
		λ|Λ (() #(() ~|)) λ|Λ (() #(() super 1|2|3)) #(() ~|)
	) (
		runforeign rust `(println("Entered macro.");) (>>>

		=================================================
		\(function taking $ and 2) // partial application
		=================================================
	)
)
/// TODO: **Come up with a binary representation for the final object values.**
/// We want every program to reduce to one final object value compiling into a binary
/// representation of it that also acts as the program's real, executable binary code.
/// 
/// **Final object value = normal form**

/// `{...}` <=> `(...)`
let ({(expr)}) = λ(expr) expr

/// `return` defined simply as ignoring the rest of the scope
let (return (x)\n(>>>scope)) = λ(x) Λ() `\(x)
// TODO: fix so works for returning out of function too and not just scope

/// `println` defined as invoking Rust's equivalent
let (println (x)\n(>>>scope)) = λ(x) Λ(scope) (
	=======================================
	runforeign rust `(println("{}", \(x));)

	\(scope)
	=======================================
)

println "hello, world"
// `(>>>` automatically inserted here, per the above function definition

// Testing pattern matching / type checking on λ below ...

let f = λ(x int) λ(y int) λ(z int) x + y + z

// λ|Λ
let 'λ|Λ # #' = f
// λ, 2+ parameters (defines first=`(x int)` second=`(y int)` in scope)
let 'λ#(first) λ#(second) #' = f
// λ, 3 parameters
let 'λ# λ# λ# #'~(λ#)'' = f
// λ, 3x `int` => `int`
let 'λ'int' λ'int' λ'int' #'int'' = f

/// **REMEMBER:**
/// > λ(...) 'int'
/// <=>
/// > λ(...) (any_param_decl ...|-1|0|1|...)'
/// --- whereas ---
/// > λ(...) #'int'
/// <=>
/// > ... | λ(...) -1 | λ(...) 0 | λ(...) 1 | ...
/// 
/// The first form checks that an `int` parameter is returned (invalid).
/// The second form checks that return type is `int` (correct).

[a, [b0, b1], c]
/// <=>
`(\!(a) (\!(b0) \!(b1)) \!(c))
/// <=>
linklist a `((\!(b0) \!(b1)) \!(c))
/// <=>
linklist a (linklist `(\!(b0) \!(b1)) (c))
/// <=>
linklist a (linklist `(\!(b0) \!(b1)) (linklist c ()))


/// ##################################################################################


/// ==============
/// ## Type system
/// ==============
/// 
/// **NOTE: In Triforce, set and union are one and the same, "set-union".**
/// - Special "solidify" operator `<...>` resolves issues arising from this.
/// 
/// The type system is based on pattern matching and set theory.
/// Every parameter has a match position containing a pattern value to match input on.
/// If this position is left unspecified, its pattern value will default to `...`.
/// 
/// `Pattern = Value = Object|TypeSet|"..."`
/// 
/// - `Object`  = the basic value, optionally having fields
/// - `TypeSet` = set-union of 0, 1 or more values
/// - `"..."`   = special value evaluating to a suitable pattern
/// 
/// ### TypeSet
/// -----------
/// A `TypeSet` is a set-union of 0, 1 or more values. It comes in 2 forms:
/// - The *inclusively matching* `InclSetUnion`
/// - The *excludingly matching* `ExclSetUnion`
/// 
/// The first form is the default and will match any value contained in itself.
/// The second form is the inverse of the first and will instead match all values
/// *not* in the set. You can get the inverse set by using the complement/inverse
/// operator `~` on a normal set. The `~` operator also combines with itself and other
/// operators to enable switching back and forth between inverse and normal sets.
/// 
/// **NOTE:** These 2 variants are *necessary* in order to allow for important type
/// checking that would otherwise introduce paradoxes if implemented only with pure
/// sets. For example, the wildcard operator `_` cannot be a set, because then it
/// would have to contain itself. Therefore, `_` is instead defined as simply being
/// the excludingly matching empty set `~|`.

/// ### Examples
/// ------------

// The empty, uninhabited bottom type is an empty set without values.
let (N/A) type = |
// It is the complement of the universal top type (wildcard), which matches anything:
let  any  type = _ = ~|

~any :== ~_ :== ~~| :== N/A

// Since the empty `N/A` type matches nothing, this "function" cannot be called.
func Object (field any) (N/A);
// Instead, we can partially apply it to use it as an object:
let obj = Object "field value"

// The singleton type is a set of one value.
let mut typ = "singleton"
// Values can be added to a type using the `|` ("or") operator.
typ |= 1|2|3
// As well as filtered using the `&` ("and") operator.
typ &= 2|"singleton"

typ :== "singleton"|2

// Best to remove mutability when no longer needed
let typ = typ

// `N/A` matches no value, which means it technically matches the lack of a value.
// Hence, any non-returning function will have its return type being `N/A`.
partial func f() --> N/A { f()   }
partial func g() --> N/A { panic }

// This also makes it possible to check for totality:
func total() --> ... where (this is N/A) is False {
	...
}
// Note though that this check is unnecessary for non-partial `func`:
// It already does such a totality check automatically.

// Instead of defining a new variable, the below simply type checks `"something"`
let 'str' = "something"
// <=>
let _ str = "something"

// Pattern matching on object field - and extracting into variable
let 'Cons (Cons #(field Cons int))' = Cons (Cons (Cons 123))

println field
//> Cons 123

// Patterns are first-class
let pattern <Cons (Cons #(field Cons int))> = Cons (Cons #(field Cons int))

// Type checking...
let var typ = val
// ... of objects
let obj 1|2|3 = 2
// ... of types
let typ <1|2|3> = 1|2|3
// ... of types of types
let typ_of_typ <<1|2|3>> = typ
// ... of types of types and objects
let complex_typ <<1|2|3>|1|2|3|4|5|6> = <typ>|typ|4|5|6

// TODO ... [to fully solve: see "N/A - the type with no value" in random_experiments]

// TODO more:
// - type equality, should order matter or not?
//       - Probably best to ignore order of elements. Order seemed helpful in some
//         cases, but those cases have (better?) workarounds + order causes issues.
// - maybe have `super` keyword for when superposition types should be allowed?
//       - UPDATE: better with `#'...'` for superposition types
// - subset + member checking combined by default, or member checking only by default?
//       - UPDATE: member checking better, `#'...'` superpos types resolves issue
// - **NOTE:** Subset checking means the empty set `|` matches itself.
//             Meaning there would be no way to fully block an argument application.
//             (Unless make special exception for the empty type of course)


/// ##################################################################################


/// =================
/// ## Type inference
/// =================
/// 
/// `...` = the set of all allowed values in the context it is used
/// 
/// This special pseudo-type is useful for scripting/prototyping, as it is a
/// shapeshifter and takes on the form of whatever type is applicable in the context
/// it is used. Using it allows you to code in a more dynamic way, removing the need
/// to think about what types variables and functions should have. It is not strictly
/// dynamic typing as `...` is still technically meant to be statically inferred,
/// but many of the cons of dynamic typing still apply. Consequently, using `...` in
/// this way should be left for code where correctness is not of importance.
/// 
/// Another use of the type is to solve equations. `...` can be seen as the unknown
/// in an equation, and be given a name like `let x = ...`. The compiler will then
/// figure out one or more values that the unknown variable can take on.

/// ### Syntax sugar
/// ----------------

func f $x;
// <=>
func f ($x as ...);
// <=>
func f ($x as ...) --> ...;

/// ### Examples
/// ------------

func f ($x as ...) --> ... {x + 123}
// <=>
func f ($x as num) --> any {x + 123}

let a: ... = 456;
// <=>
let a: ___ = 456; // note: `___` = `_` = `any`

println (f a);         // OK
//> println (f "str"); // type error

////////////////

let n: int = ...;

2*n + 1 :== 9; // <=> `(2*n + 1 == 9): True`
2*n     :== 8;
  n     :== 4; // "n should equal 4"

println n; //> 4


/// ##################################################################################


/// =============
/// ## Evaluation
/// =============
/// 
/// By default, every pure (non-I/O, non-effectual, deterministic) expression
/// that *can* be evaluated at compile time, *will* be evaluated at compile time.
/// - Evaluation timing out during compilation will finish during runtime.
/// 
/// `run $expr` overrides the default and forces *runtime* execution of `$expr`.
/// 
/// `prerun $expr` forces *compile time* execution of any (impure) expression.

/// ### Examples
/// ------------

{
	func f $x {x + 123}

	let a = 456;

	println (f a);
	prerun println "f(a) = ${f a}";
	
	run {
		let b = 321;
		println(f b);
	}
}
// <=> (after compile time evaluation)
{
	func f $x {x + 123}
	
	println 579;
	
	let b = 321;
	println(f b);
}
// Additionally, "f(a) = 579" will be printed during compilation.
