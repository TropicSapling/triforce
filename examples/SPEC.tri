/// ==================================================================================
/// 
///                     ########  TRIFORCE SPECIFICATION  ########
/// 
/// ==================================================================================

/// # Triforce by Example
/// This file specifies the Triforce language by means of code examples.
/// 
/// **Note:**
/// - Only non-obvious parts of the language are explained here.
/// - The specification is incomplete and ever-evolving.


/// ##################################################################################
/// ##################################################################################


/// ================
/// ## Formal syntax
/// ================
/// 
/// The formal syntax will be specified with a metalanguage similar to Go's:
/// ```
/// Syntax     = [Definition]…
/// Definition = def_name "=" Expression ["\n" "|" Expression]… "\n"
/// Expression = Term ["|" Term]…
/// Term       = Factor [Factor]…
/// Factor     = def_name | tok["-"tok] | Group | Option
/// Group      = "("Expression")"
/// Option     = "["Expression"]"["…"]
/// ```
/// 
/// Lexical tokens are enclosed in "" or `` (i.e. "let", "=", "``" or `""`).
/// Terminal tokens are lowercase. Non-terminal tokens are CamelCase.
/// - `[a-b]` = characters a through b
/// 
/// Note that one or more consecutive newlines - potentially intertwined with any
/// other whitespace, which is ignored - together form a `\n` token. All other
/// whitespace is ignored, apart from serving to separate non-newline tokens.
/// 
/// ### General
/// -----------
/// ```
/// Syntax     = [Expression]
/// Expression = ListExpr|Value
/// 
/// ListExpr = "("    [ListEvalApp|CmdCall|FuncUse] ")"
///          | "(>>>" [ListEvalApp|CmdCall|FuncUse]
/// 
/// Value = block
/// 
/// ListEvalApp = ListExpr (Argument|token) [Argument|token]…
/// 
/// CmdCall = BlockDef|GroupDef|TokenDef|Lambda
/// FuncUse = (IdentToken|Argument) [IdentToken|Argument]…
/// ```
/// 
/// The special `(>>>` open-ended parenthesis encloses everything that follows it
/// within its own scope. It is always paired with a closing parenthesis implicitly
/// placed at the end of the scope. Note that this scope can continue past EOF if the
/// file has been included into another file; this allows for importing definitions.
/// 
/// Note also that `FuncUse` must always contain *at least* one `IdentToken`.
/// 
/// ### Block Definitions
/// ---------------------
/// ```
/// BlockDef = EvalToDefblock EvalToBVariant BStart BEnd BEsc ListExpr
/// BStart   = regex_with_var_def_and_interpolation
/// BEnd     = regex_with_var_def_and_interpolation
/// BEsc     = regex_with_var_def_and_interpolation | "(" ")"
/// 
/// EvalToDefblock = ListExpr | "defblock"
/// EvalToBVariant = ListExpr | "comment" | "string" | "cstring" | "custom"
/// ```
/// 
/// ### Group/Token Definitions
/// ---------------------------
/// ```
/// GroupDef = EvalToDefgroup  "(" [token]… ")" ListExpr
/// TokenDef = EvalToDeftokens "(" [token]… ")" ListExpr
/// 
/// EvalToDefgroup  = ListExpr | "defgroup"
/// EvalToDeftokens = ListExpr | "deftokens"
/// ```
/// 
/// ### λλλλλ
/// ---------
/// ```
/// Lambda    = EvalToLambda EvalToLVariant ParamList ListExpr [ArgList]
/// ParamList = "("    [Parameter]… ")"
/// ArgList   = "("    [Argument]…  ")"
///           | "(>>>" [Argument]…
/// 
/// Parameter = "("    ParName [Type] ")"
///           | "(>>>" ParName [Type] ")"
///           | "'" Type "'"
/// 
/// Argument = ListExpr | Builtin | "$"[IdentToken]
/// 
/// ParName   = "(" [AttrList] FuncPart [FuncPart]… ")" | IdentToken
/// FuncPart  = Parameter|IdentToken
/// 
/// EvalToLambda   = ListExpr | "λ"
/// EvalToLVariant = ListExpr | "transform" | "function"
/// ```
/// 
/// **NOTE:**
/// `(>>>` as part of `Parameter` here indicates something slightly different than it
/// normally does. It will not enclose everything that follows it, but instead act as
/// a normal start-of-parameter - apart from also declaring that an open-ended `(>>>`
/// should be automatically placed ahead of the parameter/argument at application.
/// 
/// ### Type System
/// ---------------
/// ```
/// Type = "(" [Type] ")"
///      | "<" [Type] ">"
///      | UnaTypeOp
///      | BinTypeOp
///      | MatPat
///      | Single
/// 
/// UnaTypeOp = "super" [Type]
///           | "power" [Type]
///           | "~"     [Type]
/// 
/// BinTypeOp = [Type] "&" [Type]
///           | [Type] "|" [Type]
/// 
/// MatPat = (Match|token) [Match|token]…
/// Single = Builtin|block
/// 
/// Match = "$"[IdentToken] | "#"[Parameter]
/// ```
/// 
/// ### Attributes
/// --------------
/// ```
/// AttrList  = "##" "(" [Attribute]… ")"
/// Attribute = "(" (PreceAttr|AssocAttr) ")"
/// 
/// PreceAttr = Builtin "precedes" Builtin
/// AssocAttr = "assoc" ("none"|"left"|"right")
/// ```
/// 
/// Precedence relations form a DAG - see figure 1 in the following paper:
/// [https://www.cse.chalmers.se/~nad/publications/danielsson-norell-mixfix.pdf]
/// 
/// Default associativity should probably be "none" or "left".
/// 
/// ### Foreign Function Interface
/// ------------------------------
/// ```
/// RunForeign = "runforeign" "rust" block
/// ```
/// 
/// ### Misc.
/// ---------
/// ```
/// Builtin    = "this"|"..."|"_"
/// IdentToken = token
/// ```
/// 
/// Comments and whitespace can be inserted anywhere.
/// Note however that newlines count as tokens and are sometimes used.

/// -----------------------------------

// Below is some sort of prelude/foundation to test the syntax

/// TODO: Consider just scrapping the idea that `(...)` is function application.
///       Causes issues with partial application (i.e. `let $unapplied = 123\n`).
/// 	  BUT can keep that it represents a list of tokens!

(>>>
defblock comment //        \n    () (>>>
defblock string  "         "     \\ (>>>
defblock cstring `         `     \\ (>>>
defblock cstring \(x=)===+ \(x)  () (>>>

/// Groups and blocks are used for deciding how to form tokens.
/// - Comment blocks and whitespace groups are ignored and do not form tokens.
/// - Remaining blocks & groups form tokens as has been defined.
defgroup (+ - * / ^ < > & | =) (>>>
defgroup (@ % ? !)             (>>>
defgroup (. ,)                 (>>>
defgroup (: ;)                 (>>>
defgroup ($ #)                 (>>>
/// Built-in groups:
/// - Default
/// - Whitespace, excl. `\n`
/// - `\n`

/// The `deftokens` command defines specific stand-alone tokens.
deftokens ({ } [ ] ~ ') (>>>
/// Built-in tokens:
/// - `(`
/// - `)`
/// - `(>>>`

/// Example following the above definitions:
/// > let invalidstr str="123 + 456"//+789
/// > 				   *=(("*789"))
/// =>
/// [let, invalidstr, str, =, "123 + 456", *=, (, (, "*789", ), ), \n]

/// Functions/Transforms are special built-in objects with 2 fields: parameters, body.
/// The fields are evaluated in order, but since they are not normal expressions they
/// are evaluated in special ways specific to each field. They both evaluate to
/// reduced forms where as much as possible has been evaluated normally.
/// - Whatever cannot be normally evaluated will evaluate to itself
(Transform [(glob_scope)] (
	================================================
	(Function [((let (pat) = (val)\\n(>>>scope)))] (
		\(glob_scope)
	)) (Transform [(pat), (val), (scope)] (
		========================================
		(Function [\\(pat)] (\\(scope))) \\(val)
		========================================
	))
	================================================
))) (>>>(>>>

/// Everything here and after is passed as input to the `Transform`.
/// This is because `(>>>` is a special, open-ended parenthesis.
/// 
/// Meaning that:
/// > (Transform [(glob_scope)] (...)) (>>>(>>>
/// > ...
/// <=>
/// > (Transform [(glob_scope)] (...)) ((
/// >	 ...
/// > ))
/// 
/// That is, the global scope is passed as the `glob_scope` argument.

let type1 = 123
let type2 = 1|2|3

/// Example Function ...
let lambda = Function [(x type1), (y type2), (z)] (
	runforeign rust `println("Got {}, {}, {}.", \(x), \(y), \(z));` (

	Transform [((function taking (a) and (b type2)))] (
		runforeign rust `println("Entered macro.");` (

		=================================================
		\(function taking $ and 2) // partial application
		=================================================
	)))
)
/// ... and then again, with the RHS evaluated into a final *object value*:
let lambda = Function ['123', (y 1|2|3), (z _)] (
	runforeign rust `println("Got {}, {}, {}.", 123, \(y), \(z));` (

	Transform [(
		(function taking '|' and '1|2|3')
		Function|Transform [#'_', (#'_' #'super 1|2|3')] #'_'
	)] (
		runforeign rust `println("Entered macro.");` (

		=================================================
		\(function taking $ and 2) // partial application
		=================================================
	)))
)

let ({(expr)}) = (λ function ((expr)) (expr)) $expr // `$` = unapplied arg

let (println (x)\n(>>>scope)) = λ transform ((x)) (
	======================================
	runforeign rust `println("{}", \(x));`

	\(scope)
	======================================
)

println "hello, world"
// `(>>>` automatically inserted here, per the above function definition

// Testing pattern matching / type checking on λ below ...

let f = λ function ((x int) (y int) (z int)) (x + y + z)

// λ
let f λ _ _ _ = f
// λ function, 1+ parameters (defines first=`(x int)` rest=`(y int) (z int)` in scope)
let f λ function ¤(#(first) #(rest)) _ = f
// λ function, 3 parameters
let f λ function `\(_) \(_) \(_)` _ = f
// λ function, 3x `int` => `int`
let f λ function `\('int') \('int') \('int')` int = f


/// ##################################################################################


/// ==============
/// ## Type system
/// ==============
/// 
/// `_` = the set of all values valid at its position (excluding itself)
/// 
/// The type system is loosely based on set theory. It follows similar rules, but has
/// a different syntax specially crafted for programming. A type is defined as a set
/// of zero, one or more values, where the values may be types themselves.

/// ### Examples
/// ------------

// The empty, uninhabited bottom type is an empty set without values.
let (N/A) type = |
// It is the complement of the universal top type, which contains all values:
let any type = _

~any :== ~_ :== N/A

// Since the empty `N/A` type matches nothing, this "function" cannot be called.
func Object (field any) (N/A);
// Instead, we can partially apply it to use it as an object:
let obj = Object "field value"

// The singleton type is a set of one value.
let mut typ = "singleton"
// Values can be added to a type using the `|` ("or") operator.
typ |= 1|2|3
// As well as filtered using the `&` ("and") operator.
typ &= 2|"singleton"

typ :== "singleton"|2

// Best to remove mutability when no longer needed
let typ = typ

// TODO ... [to fully solve: see "N/A - the type with no value" in random_experiments]

// TODO more:
// - type equality, should order matter or not?
//       - Probably best to ignore order of elements. Order seemed helpful in some
//         cases, but those cases have (better?) workarounds + order causes issues.
// - maybe have `super` keyword for when superposition types should be allowed?
// - subset + member checking combined by default, or member checking only by default?
// - **NOTE:** Subset checking means the empty set `|` matches itself.
//             Meaning there would be no way to fully block an argument application.
//             (Unless make special exception for the empty type of course)


/// ##################################################################################


/// =================
/// ## Type inference
/// =================
/// 
/// `...` = the set of all allowed values in the context it is used
/// 
/// This special pseudo-type is useful for scripting/prototyping, as it is a
/// shapeshifter and takes on the form of whatever type is applicable in the context
/// it is used. Using it allows you to code in a more dynamic way, removing the need
/// to think about what types variables and functions should have. It is not strictly
/// dynamic typing as `...` is still technically meant to be statically inferred,
/// but many of the cons of dynamic typing still apply. Consequently, using `...` in
/// this way should be left for code where correctness is not of importance.
/// 
/// Another use of the type is to solve equations. `...` can be seen as the unknown
/// in an equation, and be given a name like `let x = ...`. The compiler will then
/// figure out one or more values that the unknown variable can take on.

/// ### Syntax sugar
/// ----------------

func f $x;
// <=>
func f ($x as ...);
// <=>
func f ($x as ...) --> ...;

/// ### Examples
/// ------------

func f ($x as ...) --> ... {x + 123}
// <=>
func f ($x as num) --> any {x + 123}

let a: ... = 456;
// <=>
let a: ___ = 456; // note: `___` = `_` = `any`

println (f a);         // OK
//> println (f "str"); // type error

////////////////

let n: int = ...;

2*n + 1 :== 9; // <=> `(2*n + 1 == 9): True`
2*n     :== 8;
  n     :== 4; // "n should equal 4"

println n; //> 4


/// ##################################################################################


/// =============
/// ## Evaluation
/// =============
/// 
/// By default, every pure (non-I/O, non-effectual, deterministic) expression
/// that *can* be evaluated at compile time, *will* be evaluated at compile time.
/// - Evaluation timing out during compilation will finish during runtime.
/// 
/// `run $expr` overrides the default and forces *runtime* execution of `$expr`.
/// 
/// `prerun $expr` forces *compile time* execution of any (impure) expression.

/// ### Examples
/// ------------

{
	func f $x {x + 123}

	let a = 456;

	println (f a);
	prerun println "f(a) = ${f a}";
	
	run {
		let b = 321;
		println(f b);
	}
}
// <=> (after compile time evaluation)
{
	func f $x {x + 123}
	
	println 579;
	
	let b = 321;
	println(f b);
}
// Additionally, "f(a) = 579" will be printed during compilation.
