%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
version: 2
name: Triforce
file_extensions:
  - tri
scope: source.triforce
extends: [TriforceCommon.sublime-syntax, TriforceCC.sublime-syntax, TriforceCS.sublime-syntax]
contexts:
  ######## TODO: CLEANUP OLD SYNTAX ########
  
  main:
    - include: general

  ################################################################################
  ##                                                                            ##
  ##                   ========  BASICALLY UNIVERSAL  ========                  ##
  ##                                                                            ##
  ################################################################################

  universal:
    - match: '\\.'
      scope: constant.character.escape.triforce
    # Code strings [WIP]
    - match: '`|===+'
      scope: string.quoted.double.triforce markup.bold
      embed: cs-general
      embed_scope: string.quoted.double.triforce meta.cs.triforce
      escape: '(?<!\\)(`|===+)'
      escape_captures:
        1: string.quoted.double.triforce markup.bold
    - match: '\b(code|literally)(\s+(just|unmangled|as\s+is))?\b'
      scope: storage.type.triforce
      push:
        - match: '[({]\n'
          set: code-block
        - match: '[({]'
          set: code-group
        - match: '{{identifier}}'
          scope: markup.raw
          pop: true
    - include: comments
    - include: truly-universal

  ################################################################################
  ##                                                                            ##
  ##                   ==============  GENERAL  ==============                  ##
  ##                                                                            ##
  ################################################################################

  general:
    - include: universal

    # Strings
    - match: '"'
      scope: punctuation.definition.string.begin.triforce
      push: double-quoted-string

    # Keywords
    - match: '\b{{keyword_ctrl}}\b'
      scope: keyword.control.triforce

    - match: '\b({{keyword_type}}|{{keyword_type_spec}})\b'
      scope: storage.type.triforce

    - match: '\b{{keyword_const}}\b'
      scope: constant.language.triforce

    - match: '((?<=.{80})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{76})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{72})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{68})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{64})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{60})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{56})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{52})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{48})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{44})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{40})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{36})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{32})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{28})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{24})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{20})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{16})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{12})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{8})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<=.{4})(?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))
          {0}|((?<!\w|{{keyword_const_uniq}})({{keyword_const_uniq}})(?!\w))'
      captures:
        1:  constant.language.triforce         # Note: intentionally in "random" order
        3:  unique3.constant.language.triforce
        5:  unique4.constant.language.triforce
        7:  unique2.constant.language.triforce
        9:  constant.language.triforce
        11: unique4.constant.language.triforce
        13: unique3.constant.language.triforce
        15: unique2.constant.language.triforce
        17: constant.language.triforce
        19: unique3.constant.language.triforce
        21: unique4.constant.language.triforce
        23: constant.language.triforce
        25: unique3.constant.language.triforce
        27: unique2.constant.language.triforce
        29: unique4.constant.language.triforce
        31: constant.language.triforce
        33: unique3.constant.language.triforce
        35: unique4.constant.language.triforce
        37: unique2.constant.language.triforce
        39: unique3.constant.language.triforce
        41: unique4.constant.language.triforce
        43: unique2.constant.language.triforce

    - match: '\b{{keyword_misc}}\b'
      scope: keyword.other.triforce

    - match: '\b[A-Z]{{var_identifier}}?'
      scope: constant.language.triforce

    # Numbers
    - match: '\b{{numbers}}\b'
      scope: constant.numeric.triforce

    # Operators
    - include: operators

    # Punctuation
    - include: punctuation

    # Blocks & groups
    - match: '(?=\{)'
      push: block

    - match: '(?=\()'
      push: group

    - match: '\['
      scope: punctuation.section.group.begin.triforce
      push:
        - meta_scope: meta.group.triforce
        - match: '\]'
          scope: punctuation.section.group.end.triforce
          pop: true
        - include: general

    # Declarations & definitions
    - match: '\b((partial\s+)?(boxing\s+)?func)\b'
      scope: storage.type.triforce
      push: func-id-search-start

    - match: '\b(multi\s+func)\b'
      scope: storage.type.triforce
      push: [multi-func-start, func-id-search-start]

    - match: '\b{{decl_sym}}\b'
      scope: storage.type.triforce

    - match: '\b(decl|unit|let(\s+mut)?(\s+(macro|rec))?)\b'
      scope: storage.type.triforce
      push: let-id-search-start

    - match: '\b(category|async\s+(scope|factory))\b'
      scope: storage.type.triforce
      push: func-id-search-start

    - match: '\bobject\b'
      scope: storage.type.triforce
      push: obj-id-search-start
    
    - match: '\b((?<=each)\s+{{var_identifier}})\b'
      scope: entity.name.function.triforce

  ################################################################################
  ##                                                                            ##
  ##                   =============  COMMENTS  =============                   ##
  ##                                                                            ##
  ################################################################################

  comments:
    - include: line-comments
    - include: block-comments

  line-comments:
    - match: '(?=//(?!/))' # regular comments
      scope: punctuation.definition.comment.triforce
      push: line-comment
    - match: '(?=///+)' # doc comments
      scope: punctuation.definition.comment.triforce
      push: doc-comment

  comment-markdown:
    # \Escaping
    - match: '\\.'
      scope: cc.constant.character.escape.triforce

    # ``` Code blocks ```
    - match: '///+\s*(```)'
      captures:
        1: markup.bold
      embed: cc-general
      embed_scope: meta.cc.triforce
      escape: '^\s*(///+)\s*(```)|^(?!\s*//)'
      escape_captures:
        2: markup.bold

    # `Inline code`
    - match: '`'
      scope: markup.bold
      embed: cc-general
      embed_scope: meta.cc.triforce
      escape: '(`)|$'
      escape_captures:
        1: markup.bold

    # *Italic*
    - match: '\*(?!\*)|\*(?=\*\*)'
      scope: markup.bold
      push:
        - meta_scope: markup.italic
        - match: '\*(?!\*)'
          scope: markup.bold
          pop: true
        - include: cleared-line-comments
        - include: doc-comment

    # **Bold**
    - match: '\*\*'
      scope: markup.bold
      push:
        - meta_scope: markup.bold
        - match: '\*\*'
          scope: markup.bold
          pop: true
        - include: cleared-line-comments
        - include: doc-comment

    # "Quotes"
    - match: '///+\s*(")'
      captures:
        1: markup.bold markup.italic
      push:
        - meta_content_scope: markup.italic
        - match: '"'
          scope: markup.bold markup.italic
          pop: true
        - include: cleared-line-comments
        - include: doc-comment

    # Section Headings/Separators
    - match: '(#{7,})(?!#)(((?!#{7,}).)*)(#{7,})?'
      captures:
        1: markup.heading.1 cc.punctuation.definition.heading
        2: comment.line.triforce markup.bold
        4: markup.heading.1 cc.punctuation.definition.heading

    # Headings
    - match: '///+\s*(#)(?!#)(.*)$'
      captures:
        1: markup.heading.1 cc.punctuation.definition.heading
        2: comment.line.triforce markup.bold
    - match: '///+\s*(#{2,6}|[=-]{7,})(?!#)(.*)$'
      captures:
        1: markup.heading cc.punctuation.definition.heading
        2: comment.line.triforce markup.bold

  doc-comment:
    - meta_scope: comment.line.triforce
    - include: comment
    - include: comment-markdown # only doc comments support markdown

  ################################################################################
  ##                                                                            ##
  ##                   ==============  STRINGS  ==============                  ##
  ##                                                                            ##
  ################################################################################

  double-quoted-string:
    - meta_scope: string.quoted.double.triforce
    - match: '(\\)[\\$]'
      captures:
        1: cc.constant.character.escape.triforce
    - match: '\\(?![({])'
      scope: constant.character.escape.triforce
      push:
        - match: '.'
          scope: constant.character.escape.triforce
          pop: true
    - match: '"'
      scope: punctuation.definition.string.end.triforce
      pop: true
    - match: '(?=[\\$][({])'
      push:
        - clear_scopes: true
        - match: '[\\$][({]'
          scope: source.triforce
        - match: '[)}]'
          pop: true
        - include: general

  ################################################################################
  ##                                                                            ##
  ##                   =============  OPERATORS  =============                  ##
  ##                                                                            ##
  ################################################################################

  operators:
    - match: \.{2,3}
      scope: keyword.operator.range.triforce
    - match: '(-->|==>)'
      scope: source.triforce
    - match: ':?([!<>=]=|[<>])'
      scope: keyword.operator.comparison.triforce
    - match: '(?:[-+%/*^&|]|<<|>>)?='
      scope: keyword.operator.assignment.triforce
    - match: '&&|\|\||!'
      scope: keyword.operator.logical.triforce
    - match: '[-+%/*]'
      scope: keyword.operator.arithmetic.triforce
    - match: '[&|^]|<<|>>'
      scope: keyword.operator.bitwise.triforce
    - match: '[@~?'']'
      scope: keyword.operator.triforce
    - match: '[$#]'
      scope: variable.parameter.triforce
      push: op-dollar
    - match: '\b_\b'
      scope: keyword.operator.triforce

  op-dollar:
    - include: universal
    - match: '{{identifier}}'
      scope: variable.parameter.triforce
      pop: true
    - match: ''
      pop: true

  ################################################################################
  ##                                                                            ##
  ##                   ==========  BLOCKS & GROUPS  ==========                  ##
  ##                                                                            ##
  ################################################################################

  block:
    - match: '\}'
      scope: meta.block.triforce punctuation.section.block.end.triforce
      pop: true
    - match: '\{'
      scope: punctuation.section.block.begin.triforce
      push: [block-body]

  block-body:
    - meta_scope: meta.block.triforce
    - match: '(?=\})'
      pop: true
    - include: general

  group:
    - match: '\)'
      scope: meta.group.triforce punctuation.section.group.end.triforce
      pop: true
    - match: '\('
      scope: punctuation.section.group.begin.triforce
      push: [group-body]

  group-body:
    - meta_scope: meta.group.triforce
    - match: '(?=\))'
      pop: true
    - include: general

  # TODO: split below into group & block to get correct meta.group & meta.block

  code-group:
    - meta_scope: markup.raw meta.block.triforce
    - match: '[)}]'
      pop: true
    - include: general

  code-block:
    - meta_content_scope: markup.raw meta.block.triforce
    - match: '\s*[)}]'
      pop: true
    - include: general

  ################################################################################
  ##                                                                            ##
  ##                   ====  DECLARATIONS & DEFINITIONS  ====                   ##
  ##                                                                            ##
  ################################################################################

  ############## FUNCTIONS ###############

  multi-func-start:
    - include: universal
    - match: '[{,]'
      push: func-id-search-start
    - match: '}'
      pop: true
    - include: general

  func-id-search-start:
    - match: '\s+\(+  ' # tmp; possible to parse correctly when not using regex, but very difficult in regex if even possible
      set: func-id-search-group
    - match: ''
      set: func-id-search

  # Should clean up below; a lot of boilerplate that can be grouped together

  func-id-search:
    - match: '(\\)(.)'
      captures:
        1: cc.constant.character.escape.triforce # cc for fade effect
        2: entity.name.function.triforce
    - include: universal
    - match: '"'
      scope: punctuation.definition.string.begin.triforce
      push: double-quoted-string
    - match: '\b{{numbers}}\b'
      scope: constant.numeric.triforce
    - match: '(?=\()'
      push: group
    - match: '(?=\[)'
      push: func-bracket-group
    - match: '\$'
      scope: variable.parameter.triforce
      push: op-dollar
    - match: '\?'
      scope: source.triforce
    - match: '(?=[{;]|-->|==>|ensures\s+safety)' # end of function declaration
      pop: true
    - match: '{{identifier}}|}|]'
      scope: entity.name.function.triforce

  func-id-search-group:
    - match: '(\\)(.)'
      captures:
        1: cc.constant.character.escape.triforce # cc for fade effect
        2: entity.name.function.triforce
    - include: universal
    - match: '"'
      scope: punctuation.definition.string.begin.triforce
      push: double-quoted-string
    - match: '\b{{numbers}}\b'
      scope: constant.numeric.triforce
    - match: '(?=\()'
      push: group
    - match: '(?=\[)'
      push: func-bracket-group
    - match: '\$'
      scope: variable.parameter.triforce
      push: op-dollar
    - match: '\?'
      scope: source.triforce
    - match: '(?=\))'
      set: func-id-search
    - match: '{{identifier}}|[{;}\]]'
      scope: entity.name.function.triforce

  func-bracket-group:
    - match: '\]'
      scope: meta.group.triforce punctuation.section.group.end.triforce
      pop: true
    - match: '\['
      scope: punctuation.section.group.begin.triforce
      push: [func-bracket-group-body]

  func-bracket-group-body:
    - meta_scope: meta.group.triforce
    - match: '(?=\])'
      pop: true
    - match: '\|'
      scope: source.triforce
    - match: '([{;]|-->|==>)'
      scope: entity.name.function.triforce
    - include: func-id-search

  ############### OBJECTS ################

  obj-id-search-start:
    - match: '\s+[\(]*  ' # tmp; possible to parse correctly when not using regex, but very difficult in regex if even possible
      set: obj-id-search
    - match: ''
      set: obj-id-search

  obj-id-search:
    - include: universal
    - match: '(?=\()'
      push: group
    - match: '\$'
      scope: variable.parameter.triforce
      push: op-dollar
    - match: '(has)|[\n;,|}]' # end of object declaration
      captures:
        1: storage.type.triforce
        2: punctuation.terminator.triforce
        3: punctuation.separator.triforce
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.function.triforce

  ################# LET ##################

  let-id-search-start:
    - match: '\s+\(*  ' # tmp; possible to parse correctly when not using regex, but very difficult in regex if even possible
      set: let-id-search
    - match: ''
      set: let-id-search

  let-id-search:
    - include: universal
    - match: '(?=\()'
      push: group
    - match: '\$'
      scope: variable.parameter.triforce
      push: op-dollar
    - match: '(?=[=:\[;])' # end of let declaration (sort of; type may follow)
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.function.triforce
